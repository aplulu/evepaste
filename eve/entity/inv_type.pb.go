// Code generated by protoc-gen-gogo.
// source: inv_type.proto
// DO NOT EDIT!

package entity

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type InvType struct {
	Id               *int32        `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Names            []*LocaleText `protobuf:"bytes,2,rep,name=names" json:"names,omitempty"`
	GroupId          *int32        `protobuf:"varint,3,req,name=group_id" json:"group_id,omitempty"`
	Volume           *float64      `protobuf:"fixed64,4,req,name=volume" json:"volume,omitempty"`
	BasePrice        *float64      `protobuf:"fixed64,5,opt,name=base_price" json:"base_price,omitempty"`
	MarketGroupId    *int32        `protobuf:"varint,6,opt,name=market_group_id" json:"market_group_id,omitempty"`
	EffectId         *int32        `protobuf:"varint,7,opt,name=effect_id" json:"effect_id,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *InvType) Reset()                    { *m = InvType{} }
func (m *InvType) String() string            { return proto.CompactTextString(m) }
func (*InvType) ProtoMessage()               {}
func (*InvType) Descriptor() ([]byte, []int) { return fileDescriptorInvType, []int{0} }

func (m *InvType) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *InvType) GetNames() []*LocaleText {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *InvType) GetGroupId() int32 {
	if m != nil && m.GroupId != nil {
		return *m.GroupId
	}
	return 0
}

func (m *InvType) GetVolume() float64 {
	if m != nil && m.Volume != nil {
		return *m.Volume
	}
	return 0
}

func (m *InvType) GetBasePrice() float64 {
	if m != nil && m.BasePrice != nil {
		return *m.BasePrice
	}
	return 0
}

func (m *InvType) GetMarketGroupId() int32 {
	if m != nil && m.MarketGroupId != nil {
		return *m.MarketGroupId
	}
	return 0
}

func (m *InvType) GetEffectId() int32 {
	if m != nil && m.EffectId != nil {
		return *m.EffectId
	}
	return 0
}

func init() {
	proto.RegisterType((*InvType)(nil), "entity.InvType")
}
func (m *InvType) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *InvType) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		data[i] = 0x8
		i++
		i = encodeVarintInvType(data, i, uint64(*m.Id))
	}
	if len(m.Names) > 0 {
		for _, msg := range m.Names {
			data[i] = 0x12
			i++
			i = encodeVarintInvType(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.GroupId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		data[i] = 0x18
		i++
		i = encodeVarintInvType(data, i, uint64(*m.GroupId))
	}
	if m.Volume == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		data[i] = 0x21
		i++
		i = encodeFixed64InvType(data, i, uint64(math.Float64bits(float64(*m.Volume))))
	}
	if m.BasePrice != nil {
		data[i] = 0x29
		i++
		i = encodeFixed64InvType(data, i, uint64(math.Float64bits(float64(*m.BasePrice))))
	}
	if m.MarketGroupId != nil {
		data[i] = 0x30
		i++
		i = encodeVarintInvType(data, i, uint64(*m.MarketGroupId))
	}
	if m.EffectId != nil {
		data[i] = 0x38
		i++
		i = encodeVarintInvType(data, i, uint64(*m.EffectId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64InvType(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32InvType(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintInvType(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *InvType) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovInvType(uint64(*m.Id))
	}
	if len(m.Names) > 0 {
		for _, e := range m.Names {
			l = e.Size()
			n += 1 + l + sovInvType(uint64(l))
		}
	}
	if m.GroupId != nil {
		n += 1 + sovInvType(uint64(*m.GroupId))
	}
	if m.Volume != nil {
		n += 9
	}
	if m.BasePrice != nil {
		n += 9
	}
	if m.MarketGroupId != nil {
		n += 1 + sovInvType(uint64(*m.MarketGroupId))
	}
	if m.EffectId != nil {
		n += 1 + sovInvType(uint64(*m.EffectId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovInvType(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozInvType(x uint64) (n int) {
	return sovInvType(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InvType) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInvType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InvType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InvType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInvType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, &LocaleText{})
			if err := m.Names[len(m.Names)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GroupId = &v
			hasFields[0] |= uint64(0x00000002)
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Volume = &v2
			hasFields[0] |= uint64(0x00000004)
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePrice", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.BasePrice = &v2
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketGroupId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MarketGroupId = &v
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInvType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EffectId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipInvType(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInvType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInvType(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInvType
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInvType
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInvType
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthInvType
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowInvType
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipInvType(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthInvType = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInvType   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorInvType = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0xcc, 0x2b, 0x8b,
	0x2f, 0xa9, 0x2c, 0x48, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b, 0xcd, 0x2b, 0xc9,
	0x2c, 0xa9, 0x94, 0x12, 0xcc, 0xc9, 0x4f, 0x4e, 0xcc, 0x49, 0x8d, 0x2f, 0x49, 0xad, 0x28, 0x81,
	0x48, 0x29, 0xcd, 0x62, 0xe4, 0x62, 0xf7, 0xcc, 0x2b, 0x0b, 0x01, 0x2a, 0x16, 0xe2, 0xe2, 0x62,
	0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd2, 0x60, 0x15, 0x52, 0xe4, 0x62, 0xcd, 0x4b, 0xcc, 0x4d,
	0x2d, 0x96, 0x60, 0x52, 0x60, 0xd6, 0xe0, 0x36, 0x12, 0xd2, 0x83, 0x18, 0xa1, 0xe7, 0x03, 0x36,
	0x21, 0x04, 0x68, 0x80, 0x90, 0x00, 0x17, 0x47, 0x7a, 0x51, 0x7e, 0x69, 0x41, 0x3c, 0x50, 0x13,
	0x33, 0x58, 0x13, 0x1f, 0x17, 0x5b, 0x59, 0x7e, 0x4e, 0x69, 0x6e, 0xaa, 0x04, 0x0b, 0x90, 0xcf,
	0x28, 0x04, 0x34, 0x31, 0x29, 0xb1, 0x38, 0x35, 0xbe, 0xa0, 0x28, 0x33, 0x39, 0x55, 0x82, 0x55,
	0x81, 0x11, 0x28, 0x26, 0xce, 0xc5, 0x9f, 0x9b, 0x58, 0x94, 0x9d, 0x5a, 0x12, 0x0f, 0xd7, 0xcc,
	0x06, 0x94, 0x60, 0x15, 0x12, 0xe4, 0xe2, 0x4c, 0x4d, 0x4b, 0x4b, 0x4d, 0x2e, 0x01, 0x09, 0xb1,
	0x83, 0x84, 0x9c, 0x04, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0x00, 0xc4, 0x0f, 0x80, 0x78, 0xc6, 0x63,
	0x39, 0x06, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xaf, 0x2d, 0x3e, 0xda, 0x00, 0x00, 0x00,
}
