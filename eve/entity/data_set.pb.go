// Code generated by protoc-gen-gogo.
// source: data_set.proto
// DO NOT EDIT!

package entity

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type DataSet struct {
	Types            []*InvType       `protobuf:"bytes,1,rep,name=types" json:"types,omitempty"`
	Groups           []*InvGroup      `protobuf:"bytes,2,rep,name=groups" json:"groups,omitempty"`
	Categories       []*InvCategory   `protobuf:"bytes,3,rep,name=categories" json:"categories,omitempty"`
	SolarSystems     []*SolarSystem   `protobuf:"bytes,4,rep,name=solar_systems" json:"solar_systems,omitempty"`
	Constellations   []*Constellation `protobuf:"bytes,5,rep,name=constellations" json:"constellations,omitempty"`
	Regions          []*Region        `protobuf:"bytes,6,rep,name=regions" json:"regions,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *DataSet) Reset()                    { *m = DataSet{} }
func (m *DataSet) String() string            { return proto.CompactTextString(m) }
func (*DataSet) ProtoMessage()               {}
func (*DataSet) Descriptor() ([]byte, []int) { return fileDescriptorDataSet, []int{0} }

func (m *DataSet) GetTypes() []*InvType {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *DataSet) GetGroups() []*InvGroup {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *DataSet) GetCategories() []*InvCategory {
	if m != nil {
		return m.Categories
	}
	return nil
}

func (m *DataSet) GetSolarSystems() []*SolarSystem {
	if m != nil {
		return m.SolarSystems
	}
	return nil
}

func (m *DataSet) GetConstellations() []*Constellation {
	if m != nil {
		return m.Constellations
	}
	return nil
}

func (m *DataSet) GetRegions() []*Region {
	if m != nil {
		return m.Regions
	}
	return nil
}

func init() {
	proto.RegisterType((*DataSet)(nil), "entity.DataSet")
}
func (m *DataSet) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *DataSet) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Types) > 0 {
		for _, msg := range m.Types {
			data[i] = 0xa
			i++
			i = encodeVarintDataSet(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Groups) > 0 {
		for _, msg := range m.Groups {
			data[i] = 0x12
			i++
			i = encodeVarintDataSet(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Categories) > 0 {
		for _, msg := range m.Categories {
			data[i] = 0x1a
			i++
			i = encodeVarintDataSet(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.SolarSystems) > 0 {
		for _, msg := range m.SolarSystems {
			data[i] = 0x22
			i++
			i = encodeVarintDataSet(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Constellations) > 0 {
		for _, msg := range m.Constellations {
			data[i] = 0x2a
			i++
			i = encodeVarintDataSet(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Regions) > 0 {
		for _, msg := range m.Regions {
			data[i] = 0x32
			i++
			i = encodeVarintDataSet(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64DataSet(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32DataSet(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintDataSet(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *DataSet) Size() (n int) {
	var l int
	_ = l
	if len(m.Types) > 0 {
		for _, e := range m.Types {
			l = e.Size()
			n += 1 + l + sovDataSet(uint64(l))
		}
	}
	if len(m.Groups) > 0 {
		for _, e := range m.Groups {
			l = e.Size()
			n += 1 + l + sovDataSet(uint64(l))
		}
	}
	if len(m.Categories) > 0 {
		for _, e := range m.Categories {
			l = e.Size()
			n += 1 + l + sovDataSet(uint64(l))
		}
	}
	if len(m.SolarSystems) > 0 {
		for _, e := range m.SolarSystems {
			l = e.Size()
			n += 1 + l + sovDataSet(uint64(l))
		}
	}
	if len(m.Constellations) > 0 {
		for _, e := range m.Constellations {
			l = e.Size()
			n += 1 + l + sovDataSet(uint64(l))
		}
	}
	if len(m.Regions) > 0 {
		for _, e := range m.Regions {
			l = e.Size()
			n += 1 + l + sovDataSet(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDataSet(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozDataSet(x uint64) (n int) {
	return sovDataSet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DataSet) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataSet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataSet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Types = append(m.Types, &InvType{})
			if err := m.Types[len(m.Types)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataSet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, &InvGroup{})
			if err := m.Groups[len(m.Groups)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Categories", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataSet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Categories = append(m.Categories, &InvCategory{})
			if err := m.Categories[len(m.Categories)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SolarSystems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataSet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SolarSystems = append(m.SolarSystems, &SolarSystem{})
			if err := m.SolarSystems[len(m.SolarSystems)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constellations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataSet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Constellations = append(m.Constellations, &Constellation{})
			if err := m.Constellations[len(m.Constellations)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataSet
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Regions = append(m.Regions, &Region{})
			if err := m.Regions[len(m.Regions)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataSet(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthDataSet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDataSet(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDataSet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataSet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataSet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthDataSet
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowDataSet
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipDataSet(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthDataSet = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDataSet   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorDataSet = []byte{
	// 261 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x8f, 0x4f, 0x4a, 0xc3, 0x40,
	0x14, 0xc6, 0x8d, 0xb5, 0x29, 0x3c, 0x35, 0xad, 0x53, 0x84, 0xa1, 0x8b, 0x58, 0xdc, 0x28, 0x82,
	0x59, 0x78, 0x04, 0x2b, 0x88, 0x5b, 0xe3, 0x3e, 0x0c, 0x75, 0x08, 0x81, 0x38, 0x13, 0xe6, 0x3d,
	0x0b, 0xb9, 0x89, 0x47, 0x72, 0xe9, 0x11, 0x44, 0x2f, 0xe0, 0x11, 0x9c, 0x7f, 0x2d, 0xe9, 0xe2,
	0x2d, 0xde, 0xef, 0xfb, 0x31, 0xf3, 0x3d, 0xc8, 0x5e, 0x05, 0x89, 0x0a, 0x25, 0x15, 0x9d, 0xd1,
	0xa4, 0x59, 0x2a, 0x15, 0x35, 0xd4, 0x2f, 0xb2, 0x46, 0x6d, 0x2a, 0xea, 0x3b, 0x19, 0xf8, 0x62,
	0xea, 0xf6, 0xda, 0xe8, 0xf7, 0x2e, 0x02, 0xe6, 0xc0, 0x5a, 0x90, 0xac, 0xb5, 0xe9, 0x23, 0x3b,
	0x43, 0xdd, 0x0a, 0x83, 0x3d, 0x92, 0x7c, 0x8b, 0x68, 0xbe, 0xd6, 0xca, 0xae, 0x6d, 0x2b, 0xa8,
	0xd1, 0x2a, 0xc2, 0x13, 0x23, 0xeb, 0xdd, 0x76, 0xf9, 0x97, 0xc0, 0xe4, 0xc1, 0xb6, 0x28, 0x25,
	0xb1, 0x1c, 0xc6, 0xee, 0x53, 0xe4, 0xc9, 0x72, 0x74, 0x7d, 0x7c, 0x37, 0x2d, 0x42, 0x9d, 0xe2,
	0x49, 0x6d, 0x5e, 0x2c, 0x67, 0x4b, 0x48, 0x7d, 0x09, 0xe4, 0x87, 0x5e, 0x98, 0x0d, 0x84, 0x47,
	0x17, 0xb0, 0x2b, 0x80, 0xd8, 0xaa, 0xb1, 0xcf, 0x8c, 0xbc, 0x35, 0x1f, 0x58, 0xab, 0x58, 0x99,
	0xdd, 0xc0, 0xa9, 0xaf, 0x5b, 0x85, 0xbe, 0xc8, 0x8f, 0xf6, 0xdd, 0xd2, 0x85, 0xa5, 0xcf, 0xd8,
	0x2d, 0x64, 0x7b, 0x77, 0x20, 0x1f, 0x7b, 0xf9, 0x7c, 0x2b, 0xaf, 0x86, 0x29, 0xbb, 0x80, 0x49,
	0xb8, 0x10, 0x79, 0xea, 0xbd, 0x6c, 0xeb, 0x3d, 0x7b, 0x7c, 0x3f, 0xfb, 0xfc, 0xc9, 0x93, 0x2f,
	0x3b, 0xdf, 0x76, 0x3e, 0x7e, 0xf3, 0x83, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x10, 0x3a, 0x40,
	0xe5, 0x88, 0x01, 0x00, 0x00,
}
