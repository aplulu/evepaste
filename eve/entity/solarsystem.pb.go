// Code generated by protoc-gen-gogo.
// source: solarsystem.proto
// DO NOT EDIT!

package entity

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_golang_protobuf_proto "github.com/golang/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SolarSystem struct {
	Id               *int32        `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	ConstellationId  *int32        `protobuf:"varint,2,req,name=constellation_id" json:"constellation_id,omitempty"`
	RegionId         *int32        `protobuf:"varint,3,req,name=region_id" json:"region_id,omitempty"`
	Names            []*LocaleText `protobuf:"bytes,4,rep,name=names" json:"names,omitempty"`
	Security         *float64      `protobuf:"fixed64,5,req,name=security" json:"security,omitempty"`
	SecurityClass    *string       `protobuf:"bytes,6,req,name=security_class" json:"security_class,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *SolarSystem) Reset()                    { *m = SolarSystem{} }
func (m *SolarSystem) String() string            { return proto.CompactTextString(m) }
func (*SolarSystem) ProtoMessage()               {}
func (*SolarSystem) Descriptor() ([]byte, []int) { return fileDescriptorSolarsystem, []int{0} }

func (m *SolarSystem) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *SolarSystem) GetConstellationId() int32 {
	if m != nil && m.ConstellationId != nil {
		return *m.ConstellationId
	}
	return 0
}

func (m *SolarSystem) GetRegionId() int32 {
	if m != nil && m.RegionId != nil {
		return *m.RegionId
	}
	return 0
}

func (m *SolarSystem) GetNames() []*LocaleText {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *SolarSystem) GetSecurity() float64 {
	if m != nil && m.Security != nil {
		return *m.Security
	}
	return 0
}

func (m *SolarSystem) GetSecurityClass() string {
	if m != nil && m.SecurityClass != nil {
		return *m.SecurityClass
	}
	return ""
}

func init() {
	proto.RegisterType((*SolarSystem)(nil), "entity.SolarSystem")
}
func (m *SolarSystem) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SolarSystem) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		data[i] = 0x8
		i++
		i = encodeVarintSolarsystem(data, i, uint64(*m.Id))
	}
	if m.ConstellationId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		data[i] = 0x10
		i++
		i = encodeVarintSolarsystem(data, i, uint64(*m.ConstellationId))
	}
	if m.RegionId == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		data[i] = 0x18
		i++
		i = encodeVarintSolarsystem(data, i, uint64(*m.RegionId))
	}
	if len(m.Names) > 0 {
		for _, msg := range m.Names {
			data[i] = 0x22
			i++
			i = encodeVarintSolarsystem(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Security == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		data[i] = 0x29
		i++
		i = encodeFixed64Solarsystem(data, i, uint64(math.Float64bits(float64(*m.Security))))
	}
	if m.SecurityClass == nil {
		return 0, new(github_com_golang_protobuf_proto.RequiredNotSetError)
	} else {
		data[i] = 0x32
		i++
		i = encodeVarintSolarsystem(data, i, uint64(len(*m.SecurityClass)))
		i += copy(data[i:], *m.SecurityClass)
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Solarsystem(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Solarsystem(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintSolarsystem(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *SolarSystem) Size() (n int) {
	var l int
	_ = l
	if m.Id != nil {
		n += 1 + sovSolarsystem(uint64(*m.Id))
	}
	if m.ConstellationId != nil {
		n += 1 + sovSolarsystem(uint64(*m.ConstellationId))
	}
	if m.RegionId != nil {
		n += 1 + sovSolarsystem(uint64(*m.RegionId))
	}
	if len(m.Names) > 0 {
		for _, e := range m.Names {
			l = e.Size()
			n += 1 + l + sovSolarsystem(uint64(l))
		}
	}
	if m.Security != nil {
		n += 9
	}
	if m.SecurityClass != nil {
		l = len(*m.SecurityClass)
		n += 1 + l + sovSolarsystem(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSolarsystem(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSolarsystem(x uint64) (n int) {
	return sovSolarsystem(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SolarSystem) Unmarshal(data []byte) error {
	var hasFields [1]uint64
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSolarsystem
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SolarSystem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SolarSystem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolarsystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Id = &v
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstellationId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolarsystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConstellationId = &v
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolarsystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegionId = &v
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolarsystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSolarsystem
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, &LocaleText{})
			if err := m.Names[len(m.Names)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Security", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(data[iNdEx-8])
			v |= uint64(data[iNdEx-7]) << 8
			v |= uint64(data[iNdEx-6]) << 16
			v |= uint64(data[iNdEx-5]) << 24
			v |= uint64(data[iNdEx-4]) << 32
			v |= uint64(data[iNdEx-3]) << 40
			v |= uint64(data[iNdEx-2]) << 48
			v |= uint64(data[iNdEx-1]) << 56
			v2 := float64(math.Float64frombits(v))
			m.Security = &v2
			hasFields[0] |= uint64(0x00000008)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecurityClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSolarsystem
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSolarsystem
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.SecurityClass = &s
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000010)
		default:
			iNdEx = preIndex
			skippy, err := skipSolarsystem(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSolarsystem
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}
	if hasFields[0]&uint64(0x00000010) == 0 {
		return new(github_com_golang_protobuf_proto.RequiredNotSetError)
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSolarsystem(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSolarsystem
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSolarsystem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSolarsystem
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthSolarsystem
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSolarsystem
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSolarsystem(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSolarsystem = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSolarsystem   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorSolarsystem = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0xce, 0xcf, 0x49,
	0x2c, 0x2a, 0xae, 0x2c, 0x2e, 0x49, 0xcd, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4b,
	0xcd, 0x2b, 0xc9, 0x2c, 0xa9, 0x94, 0x12, 0xcc, 0xc9, 0x4f, 0x4e, 0xcc, 0x49, 0x8d, 0x2f, 0x49,
	0xad, 0x28, 0x81, 0x48, 0x29, 0x4d, 0x66, 0xe4, 0xe2, 0x0e, 0x06, 0x69, 0x08, 0x06, 0x6b, 0x10,
	0xe2, 0xe2, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd2, 0x60, 0x15, 0x92, 0xe0, 0x12, 0x48,
	0xce, 0xcf, 0x03, 0x0a, 0xe7, 0xe4, 0x24, 0x96, 0x64, 0xe6, 0xe7, 0xc5, 0x03, 0x65, 0x98, 0xc0,
	0x32, 0x82, 0x5c, 0x9c, 0x45, 0xa9, 0xe9, 0x50, 0x21, 0x66, 0xb0, 0x90, 0x22, 0x17, 0x6b, 0x5e,
	0x62, 0x6e, 0x6a, 0xb1, 0x04, 0x8b, 0x02, 0xb3, 0x06, 0xb7, 0x91, 0x90, 0x1e, 0xc4, 0x4e, 0x3d,
	0x1f, 0xb0, 0x95, 0x21, 0x40, 0x1b, 0x85, 0x04, 0xb8, 0x38, 0x8a, 0x53, 0x93, 0x4b, 0x8b, 0x80,
	0xc2, 0x12, 0xac, 0x40, 0x4d, 0x8c, 0x42, 0x62, 0x5c, 0x7c, 0x30, 0x91, 0xf8, 0xe4, 0x9c, 0xc4,
	0xe2, 0x62, 0x09, 0x36, 0xa0, 0x38, 0xa7, 0x93, 0xc0, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x80, 0xf8,
	0x01, 0x10, 0xcf, 0x78, 0x2c, 0xc7, 0x00, 0x08, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x89, 0xec, 0x92,
	0xd6, 0x00, 0x00, 0x00,
}
